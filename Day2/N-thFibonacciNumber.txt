#include <bits/stdc++.h> 
const int MOD = 1e9 + 7;

// Function to multiply two 2x2 matrices modulo MOD
vector<vector<long long>> multiply(vector<vector<long long>>& A, vector<vector<long long>>& B) {
    vector<vector<long long>> result(2, vector<long long>(2, 0));
    for (int i = 0; i < 2; ++i) {
        for (int j = 0; j < 2; ++j) {
            for (int k = 0; k < 2; ++k) {
                result[i][j] = (result[i][j] + A[i][k] * B[k][j]) % MOD;
            }
        }
    }
    return result;
}

// Function to perform matrix exponentiation
vector<vector<long long>> power(vector<vector<long long>>& matrix, int n) {
    vector<vector<long long>> result = {{1, 0}, {0, 1}};  // Identity matrix
    vector<vector<long long>> base = matrix;
    
    while (n > 0) {
        //Even Exponent: Breaks down into squaring the result of halved exponent, reducing the total number of multiplications.
        if (n % 2 == 1) {
            result = multiply(result, base);
        }
        //Odd Exponent: Breaks into a * a ^n-1 , where n11 is even, 

        base = multiply(base, base);
        n /= 2;
    }
    return result;
}

// Function to calculate the nth Fibonacci number
long long fibonacciNumber(int n) {
    if (n == 1 || n == 2) {
        return 1;
    }
    
    vector<vector<long long>> matrix = {{1, 1}, {1, 0}};
    vector<vector<long long>> result = power(matrix, n - 1);
    
    return result[0][0];
}
