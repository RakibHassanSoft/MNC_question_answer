#include <bits/stdc++.h> 
//Recurcive slution (But we will get tle)
int countPaths(int i, int j, int m, int n) {
    // Base case: if we reach the last cell
    if (i == m - 1 && j == n - 1) return 1;

    // If out of bounds, return 0
    if (i >= m || j >= n) return 0;

    // Recursive calls for moving down and right
    int downPaths = countPaths(i + 1, j, m, n);
    int rightPaths = countPaths(i, j + 1, m, n);

    return downPaths + rightPaths;
}


// slution of recursive (But we will get tle)
int countPaths1(int m, int n) {
    // Create a DP table to store the number of unique paths
    vector<vector<int>> dp(m, vector<int>(n, 0));

    // Fill the first row and first column with 1 (base cases)
    for (int i = 0; i < m; i++) dp[i][0] = 1; // First column
    for (int j = 0; j < n; j++) dp[0][j] = 1; // First row

    // Iterate through the rest of the cells
    for (int i = 1; i < m; i++) {
        for (int j = 1; j < n; j++) {
            // Sum of paths from top and left
            dp[i][j] = dp[i - 1][j] + dp[i][j - 1];
        }
    }

    // The bottom-right cell contains the total number of unique paths
    return dp[m - 1][n - 1];
}
int uniquePaths(int m, int n) {
    //Recurcive apprach
	// return countPaths1(0, 0, m, n);
	// Recurcive into dp
	return countPaths1(m, n);


	
}