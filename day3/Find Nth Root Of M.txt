int NthRoot(int n, int m) {
    // Handle the case when m is 1, as the nth root of 1 is always 1
    if (m == 1) {
        return 1;
    }

    // Binary search for the nth root
    int left = 1, right = m;
    
    while (left <= right) {
        int mid = left + (right - left) / 2;
        
        // Compute mid^n
        long long power = 1;
        for (int i = 0; i < n; i++) {
            power *= mid;
            if (power > m) {
                break;
            }
        }

        if (power == m) {
            return mid;  // Found the nth root
        } else if (power < m) {
            left = mid + 1;  // We need a larger value
        } else {
            right = mid - 1;  // We need a smaller value
        }
    }

    // If no integer nth root is found, return -1
    return -1;
}